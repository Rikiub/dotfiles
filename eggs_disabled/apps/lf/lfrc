# interpreter for shell commands
set shell sh
set shellopts '-eu'
set ifs "\n"

set cursorpreviewfmt "\033[7;2m"
set scrolloff 10 # leave some space at the top and the bottom of the screen
set mouse true
set icons true
set drawbox true
set hidden false

set sixel true
set preview true

set previewer ctpv
set cleaner ctpvclear
&ctpv -s $id
&ctpvquit $id

cmd open &xdg-open "$f"

# Mappings
map . set hidden!
map D trash
map x cut
map y copy
map p paste
map <enter> open

cmd mkdir %{{
	mkdir -p "$(echo $* | tr ' ' '\ ')"
	lf -remote "send $id select \"$*\""
}}
cmd touch %touch "$(echo $* | tr ' ' '\ ')"

map a push :mkdir<space>
map A push :touch<space>

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash %gio trash $fx

# use '<delete>' key for either 'trash' or 'delete' command
map <delete> trash

cmd copy-to-clipboard ${{
	# Linux - Wayland
	if [ "$XDG_SESSION_TYPE" = "wayland" ]; then
		if wl-copy < "$f"; then
      		:
    	else
     		 wl-copy "$f"
	fi

	# Linux - X11
	elif [ "$XDG_SESSION_TYPE" = "x11" ]; then
		printf '%s' "$f" | xclip

	# Darwin
	elif type pbcopy >/dev/null 2>&1; then
		printf '%s' "$f" | pbcopy
	fi
}}
map <c-c> :copy-to-clipboard

# zoxide integration
cmd z %{{
  result="$(zoxide query --exclude $PWD $@ | sed 's/\\/\\\\/g;s/"/\\"/g')"
  lf -remote "send $id cd \"$result\""
}}

cmd zi ${{
  result="$(zoxide query -i | sed 's/\\/\\\\/g;s/"/\\"/g')"
  lf -remote "send $id cd \"$result\""
}}

cmd select-files &{{
    get_files() {
        if [ "$lf_hidden" = 'false' ]; then
            find "$PWD" -mindepth 1 -maxdepth 1 -type f,l -not -name '.*' -print0
        else
            find "$PWD" -mindepth 1 -maxdepth 1 -type f,l -print0
        fi |
        xargs -0 printf ' %q'
    }
    lf -remote "send $id :unselect; toggle $(get_files)"
}}

cmd select-dirs &{{
    get_dirs() {
        if [ "$lf_hidden" = 'false' ]; then
            find "$PWD" -mindepth 1 -maxdepth 1 -type d -not -name '.*' -print0
        else
            find "$PWD" -mindepth 1 -maxdepth 1 -type d -print0
        fi |
        xargs -0 printf ' %q'
    }
    lf -remote "send $id :unselect; toggle $(get_dirs)"
}}

cmd select-all &{{
	get_all() {
        if [ "$lf_hidden" = 'false' ]; then
            find "$PWD" -mindepth 1 -maxdepth 1 -not -name '.*' -print0
        else
            find "$PWD" -mindepth 1 -maxdepth 1 -print0
        fi |
        xargs -0 printf ' %q'
    }
    lf -remote "send $id :unselect; toggle $(get_all)"
}}
map <c-a> select-all

cmd extract ${{
    aunpack "$f"
}}

cmd compress ${{
    atool -a $fx
}}
