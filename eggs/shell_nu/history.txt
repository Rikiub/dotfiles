helix --health
clear
ls
clear
exit
nu
exit
clear
helix --health
helix --health | table
helix --health | columns
helix --health | detect columns
z media
git log
git log --pretty
git log --pretty="%h|%s|%aN|%aE|%aD" -n 25
git log --pretty="%h|%s|%aD" -n 25
git log --pretty="%h | %s |%aD" -n 25
git log --pretty="%h | %s |%a" -n 25
git log --pretty="%h | %s |%aD" -n 25
git log --pretty="%h | %s" -n 25
git log --pretty="%h | %s" -n 25 | lines
git log --pretty="%h | %s" -n 25 | lines | split columns
git log --pretty="%h | %s" -n 25 | lines | split column
git log --pretty="%h | %s" -n 25 | lines | split column "|"
git log --pretty="%h | %s" -n 25 | lines
git log --pretty="%h | %s" -n 25 | lines | split column "|"
git log --pretty=%h»¦«%s»¦«%aN»¦«%aE»¦«%aD -n 5 | lines | split column "»¦«" commit subject name email date
cat
z ignis
zoxide ignis
zoxide
zoxide init 
zoxide init nu
zoxide init nushell
zoxide init nushell | source
cd ..
cd ~
ls
exa
eza
ls
clear
cd .config/
cd ..
cd .config/ignis
ls
bat
cat options.json
from
cat options.json | from json
open options.json
clear
open options.json
help ls
help open
help commands
help commands | explore
open options.json | explore
open options.json
lutgen
lutgen palette
lutgen palette all
lutgen palette names
lutgen palette names | lines
grid
lutgen palette names | grid
lutgen palette names | lines
lutgen palette names | lines | grid
less
help grid
lutgen palette names | lines | grid --icons --color 
lutgen palette names | lines | grid --width 2
lutgen palette names | lines | grid --width 5
lutgen palette names | lines | grid --width 4
systemd status bluetooth
systemdctl status bluetooth
systemctl status bluetooth
systemctl status bluetooth | lines
systemctl status bluetooth | lines | column
systemctl status bluetooth | lines
systemctl status bluetooth | lines | column ":"
help column
help split
systemctl status bluetooth | lines | split column ":"
systemctl status bluetooth | lines | split column "sus"
systemctl status bluetooth | split column "sus"
systemctl status bluetooth | lines | split column "sus"
systemctl status bluetooth | lines | split column "bluetooth"
systemctl status bluetooth | lines | split column "bluetoothd"
systemctl status bluetooth | lines | split column "bluetoothd[504]:"
lutgen palette names | lines | grid --width 4
lutgen palette names | lines
lutgen palette names | grid
lutgen palette names | lines | split cell-path 
lutgen palette names | list
lutgen palette names | lines | split row 
lutgen palette names | lines | split row ""
lutgen palette names | lines | split row " "
lutgen palette names | lines | grid
lutgen palette names | lines | xd
lutgen palette names | lines | find dark
lutgen palette names | lines | find toky
lutgen palette names | lines | find catppuccin
lutgen palette names | find catppuccin
lutgen palette names | find catppucci
lutgen palette names | find catppuccin
lutgen palette names | rg catppuccin
lutgen palette names | find catppuccin
help ifnd
help find
du
du --help
ls
ls --help
ls --du
help save
help start
ls
ls | from json
ls | from yaml
ls | from toml
ls | lines | from toml
ls | list | from toml
ls | grid | from toml
ls | from text
ls | to json
ls | to toml
ls | to yaml
ls | to toml
ls | to csv
ls | to tsv
ls | to plist
ls | to html
ls | to md
ls | to 
ls | to msgpack 
ls | to nuon
ls | to xml
tutor
tutor begin
ls | select name
tutor tables
ls | select 2
ls | select name
ls | get name
tutor cells
ls | select 4 | get name
ls.4.name
(ls).4.name
tutor expressions
tutor echo
help tuto
help tutor
tutor where
tutor list
tutor block
tutor echo
help url
clear
touch foo
touch bar
ls
ls | rm
rm
help rm
ls | each { rm $in.name }
ls
touch foo
touch bar
ls
ls | each { rm $in.name }
ls
help mv
ls
touch foo
mv foo foo.txt
touch bar.txt
ls
help mkdir
man
clear
ls
mkdir foo/bar
y
yazi
ls
y
yazi
ls
help sort
help sort-by
ls
ls | sort-by $in.name
ls | sort-by type
ls --help
ls *.txt
ls *.txt | each { mv $in foo/bar}
ls *.txt | each { mv $in foo/bar }
ls *.txt | each { mv $in.name foo/bar }
y
yazi
help each
ls
cd ..
ls
rm nu
help rm
rm -r nu/
ls -a
ls
ls --help
ls -l
cd ..
cd config
cd .config
cd ~
cd .config
ls -l
cd .config
ls -l
help ls
ls -d
ls -d -t
ls -d
ls -d -t
ls -d
cd BraveSoftware/
ls -d -t
cd Brave-Browser/
ls -d -t
ls
ls -d
ls | sort-by type
z ignis
clear
exit
clear
ls -a
clear
z 
clear
chsh
clear
cd .config/
ls
cd nu
cd nushell/
ls
yazi
rg history.txt ignis
tldr ignis
tldr ags
tldr nu
tldr rg
rg -f
rg -f history
yazi
bat history.txt
open history.txt
open history.txt | lines
open history.txt | lines | where igni
help where
open history.txt | lines
open history.txt | lines | table
open history.txt | lines | rg 
open history.txt | lines | rg x
open history.txt | rg xd
open history.txt | lines | rg ignis
cd .config/BraveSoftware/
cd ..
clear
clear
ls -a
clear
kill starship
pip
pd
pid
pwd
clear
pid
pi
pd
clear
ls
pd
ls
clear
ls
cler
clear
source starship
clear
## ~/.config/nushell/env.nu<\n>$env.CARAPACE_BRIDGES = 'zsh,fish,bash,inshellisense' # optional<\n>mkdir ~/.cache/carapace<\n>carapace _carapace nushell | save --force ~/.cache/carapace/init.nu<\n><\n>#~/.config/nushell/config.nu<\n>source ~/.cache/carapace/init.nu<\n>
mkdir ~/.cache/carapace
carapace _carapace nushell | save --force ~/.cache/carapace/init.nu
source ~/.cache/carapace/init.nu
clear
z media
source zoxide init
zoxide init nushell | source
source zoxide init nushell
source (zoxide init nushell)
clear
media-dl
clear
ls
cler
clear
ls
clear
ls
cd .config/nushell/
ls
open env.nu
open config.nu
ls
clear
carapace
carapace git 
carapace git nushell
carapace nushell
carapace nushell git
carapace git nushell
carapace git fish
carapace git nushell
carapace git nushell --co
carapace git nushell --commit
carapace git --commit nushell
carapace git nushell
tldr carapace
carapace
echo xd
[1, 2, 3] | echo
[1, 2, 3] | lines
[1 2 3] | lines
[1 2 3] | echo
[1 2 3] | table
[1, 2, 3] | table
[1 2 3] | table
clear
ls
ls --help
ls -a
cler
clear
ls -a
eza
eza --icons
clear
ls
clea
ls
clear
ls
rm --help 
config
config flatten
ls
trash
ls
clear
l
clear
ls
ls | where type == dir
print xd
help print
cd .config/nu
cd .config/nushell/
ls
echo $env
$env | echo
$env | explore
explore $env
help explore
$env | explore
print $env
echo $env
set
$env.XDG_CACHE_HOME = xd
$env.XDG_CACHE_HOME = "xd"
echo $env.XDG_CACHE_HOME
?
help ?
clear
git switch api-separate-progress 
git pull
clear
git pull
git switch api_changes 
git switch cache 
git switch api_changes 
git switch main
git diff main api_changes 
git diff api_changes main 
git switch cache 
git switch main
git diff cache main
ls
clear
ls
git branch --delete api_changes cache 
ls
clear
git branch --remotes 
git branch --delete --remotes origin/cache origin/api_changes 
git branch --delete templates  
git branch
git branch --remotes
clear
git switch api-separate-progress 
clear
git switch main
code .
clear
code .
clear
ls
clear
ls
clear
ls
echo $env
echo $env.BROWSER
clear
code .
clear
git add .
git commit -m "Refact"
clear
git push
clear
git switch api-separate-progress 
ls
clear
git pull
git branch --set-upstream-to=origin/main api-separate-progress
git pull
git switch main
git diff main origin/main 
clear
git log
cd ..
cd media-dl/
ls
clear
ls
git stauts
git status 
git diff main origin/main 
git diff origin/main main
git checkout origin/main 
git log
git revert 13112bfca4757f2b860aaf2e935d7eca94a94b1e
git revert 13112bfca4757f2b860aaf2e935d7eca94a94b1e -m
tldr git revert
git log
tldr git revert
git log
git revert 13112bfca4757f2b860aaf2e935d7eca94a94b1e
git log
git revert d4f714be15572b105dd0ffcc46fd972002be3cbf
git log
git revert 13112bfca4757f2b860aaf2e935d7eca94a94b1e
git revert 13112bfca4757f2b860aaf2e935d7eca94a94b1e -m 
git revert -m 13112bfca4757f2b860aaf2e935d7eca94a94b1e
git revert 13112bfca4757f2b860aaf2e935d7eca94a94b1e -m 1
git log
clear
git restore .
git log
git switch main
git log
git diff origin/main main
git diff main origin/main
git diff origin/main main
clear
pytest
source .venv/bin/activate.nu
.venv/bin/activate.nu
uv venv
rm -r venv
rm -r .venv
uv venv
help overlay
overlay list
overlay use
overlay use .venv/bin/activate.nu
clear
ls
clear
ls
clear
ls
clear
ls
clear
pytest
media-dl
clear
uv sync
media-dl
clear
pytet
pytest
clear
git log
clear
pytest
clea
clear
git add .
git commit -m "Revert merge"
ls
git log
git commit -m "Revert merge"
git ppush
git push
git pull --force
git push
git push --force
git log
clear
deno run 
deno run dev
deno --help
deno install --help
tldr deno 
tldr install
clear
echo $env.
echo $env.XDG_CACHE_HOME
clear
btop
query
clear
query
help query
format
paru -Ss nushell
plugin
plugin add 
inc
plugin use inc
plugin
plugin list
btop
fastfetch 
fastboot 
help fastboot
tldr fastboot
nu-highlight 
help nu-highlight 
z media
ls
z media
clear
ls
cd Documentos
cd ..
cd Documentos/
cd Dev/+Lang/python/media-dl/
clear
open pyproject.toml
open pyproject.toml --raw
open pyproject.toml --raw | nu-highlight 
open media_dl/_ydl.py
open media_dl/_ydl.py | nu-highlight 
clear
btop
fastfetch 
clear
cd ..
cd .config/nushell/
ls
zoxide init nushell
zoxide init nushell 
ls
ls -a
echo $nu.env-path
ls
zoxide init nushell | save ~/xd.nu
ls
bat xd.nu
rm xd.nu
clear
echo $nu.env-path
helix env.nu
helix config.nu
clear
z m
clear
$nu.vendor-autoload-dirs
helix config.nu 
help touch
greet
get
help get
yazi
z
cd .config/nushell/
help path
path
$env.config
$env.config | explore
$env.config
config
config env
config  nu
echo $env.EDITOR
clear
ls
clear
clera
clear
$nu.cache-dir
$nu.is-interactive
$nu.startup-time
clear
safsfas
ls
clear
ls
eza
clear
ls
cd .config
ls
paru -Rns starship
ls
cd .local
cd share/nu
cd share
cd nushell/
ls
clear
ls
clear
ls
clear
ls
git
git log
z media
ls
clear
ls
clear
ls
clear
ls
clear
ls
clear
ls
clear
ls
l
clear
ls
clear
ls
clear
ls
l
z nu
ls
helix config.nu 
clear
ls
clear
ls
clear
media-ctl 
cd .local/bin
ls
accent-color-change 
clear
ls
clear
ls
clear
ls
clear
ls
clear
ls
clear
ls
clear
ls
clear
ls
clear
ls
clear
ls
clear
ls
cd .config
ls
ls xd
ls *xd
ls .toml
ls *.toml
eza xd
eza *toml
clear
ls
ls | grid
ls
clear
ls
z media
ls
clear
z ifhs
z fish
ls
cler
clear
ls
clear
ls
yazi
yolk sync
config
$env.UV_CACHE_DIR
echo "$env"
echo $env.XDG_CACHE_HOME
$env.XDG_CACHE_HOME
echo $env.XDG_CACHE_HOME
z nush
yazi
echo $HOME
$env.HOME
$env.HOME + "xd"
$env.HOME + "(xd"
$env.HOME + "/xd"
format
help format
tldr nu ls
help format
parse
help parse
help merge
$env
$env.config
config nu
config env
z nu
ls
$env.HISTFILE
$env.XDG_CACHE_HOME
helix env.nu 
$env.CARGO_HOME
lear
cler
clear
ls
yazi
clear
ls
echo $nu.env-path
echo $nu.home-path
echo $env.HOME
echo $carapace_complete
echo $in
config nu
echo $in
echo $nu.data-dir
echo $nu.user-autoload-dirs
echo $nu.vendor-autoload-dirs
z nu
$nu.user-autoload-dirs
z auto
z share
z nu
clear
starship
starship init nushell
starship init nu
$nu.config-path
$nu.env-path
$nu.home-path
$nu.user-autoload-dirs
$nu.user-autoload-dirs.0
starship init nu
starship init nu | save $nu.user-autoload-dirs.0/starship.nu
starship init nu | save $"($nu.user-autoload-dirs.0)/starship.nu"
clear
z nu
clear
echo $env.CAR
$env.CARGO_HOME
echo $env.CAR
echo $env.CARGO_HOME
ls
echo $env.CARGO_HOME
echo $env.HOME
echo $env
echo $env | bat
echo $env | bat -p
$env | explore
exit
z nu
source starship.nu
z nu
overlay use starship.nu 
overlay list
overlay
overlay hide starship.nu
overlay list
z nu
clear
l
clear
ls
paru -Rns zoxide
z nu
paru -S zoxide
caparace
carapace _carapace
carapace _carapace nushell
carapace _carapace nushell | nu-highlight 
carapace _carapace nushell | save $nu.user-autoload-dirs-0 + "/"
carapace _carapace nushell | save $"($nu.user-autoload-dirs.0)/carapace.nu"
which
help path
$env.HOME | path
$env.HOME | path basename
$env.HOME | path dirname 
$env.HOME
"xd" | path dirnmae
"xd" | path dirname 
"xd" | path basename 
"xd" | path 
pñath
$env.HOME | path dirname 
$env.HOME | path
$env.HOME | path exists
$env.HOME | path join "xd"
$env.XDG_CONFIG_HOME
path
$env.XDG_CONFIG_HOME | path
$env.XDG_CONFIG_HOME | path parse
path
path add
help path add
ls
cler
clear
ls
clear
cd .config
ls
gio trash --empty
clear
ls
clear
ls
clear
ls
clear
ls
clear
ls
clear
ps
clear
ps
ps | explore
ps | where memory
ps | where mem
ps | where mem > 5
ps | where mem > 5mb
ps | where mem > 5gb
ps | where mem > 5mb
ps | where mem > 100mb
ps | where mem > 50mb
ps | where mem > 100mb
btop
ps | where mem > 100mb
clear
ps | where mem > 100mb
z yolk
z fish
cd .config/fish
cd .config
yolk sync
rm ~/.config/starship.toml 
rm -r ~/.local/share/zoxide
yolk sync
cd .config
cd yolk
yolk sync
z yolk
ls
clear
ls
clear
ls
clear
ps
bash
ls -a
ls
clear
bash
clear
ps
ps | where mem > 100mb
ps
ps | where status
ps | where status == ""
ps | where status == "Pending"
ps | where status == "Running"
ps
ps | where status == "Sleeping"
ps
ps | sort
ps | sort-by mem
clear
ps | sort-by mem
ps | sort-by mem and
ps | sort-by mem &&
help sort-by
ps | sort-by mem and sort
ps | sort-by mem | sort-by mem
ps | sort-by mem | where mem > 100mb
clear
ls
clea
clear
ls
clear
ps
ps | where # == 1
ps | where pid 1
ps | where pid == 1
ps | $in.1
ps | $pid.1
ps | $in.pid.1
ps | $in.pid
ps | $current
ps | $it
ps | $in
ps | $in.pid
ps | $in.pid.0
ps | $in.pid.2
ps | $in.pid.3
ps | $in.mem.5
ps | $in.mem.2
ps | sort | $in.mem.2
ps | sort --reverse  | $in.mem.2
ps | sort --reverse  | $in.mem.5
ps | sort --reverse  | $in.mem.1
ps | sort-by mem | $in.mem.1
ps | sort-by mem -r | $in.mem.1
ps | sort-by mem -r | $in.mem.0
ps | sort-by mem -r | $in.mem.1
ps | sort-by mem -r | $in.mem.0 and $in.pid
ps | sort-by mem -r | $in.mem.0 and $in.pid.0
ps | sort-by mem -r | $in.mem.0 | $in.pid.0
ps | sort-by mem -r | $in.mem.0 | $in.pid
ps | sort-by mem -r | $"($in.pid.0) | ($in.mem.0)"
ps | sort-by mem -r | $"PID: ($in.pid.0) | ($in.mem.0)"
ps | sort-by mem -r | $"PID: ($in.pid.0) | MEM: ($in.mem.0)"
help
sys
sys cpu
sys
sys disks
sys
help
sys
sys users
sys users | get sus
help sys users
sys users | get sus
sys users
sys users | $in.sus
sys users | $in.name.sus
sys users | where $in.name == "sus"
sys users | where $name == "sus"
sys users | where name == "sus"
sys users | get name
sys users | get sus
sys users | get name
help
help --find
help
clea
rls
clera
clear
ls
cd Documentos/
paru -Sy nushell
random
random binary
random bool
random
random binary 1
random chars
random uuid
random int
clear
l
ls
clear
ls
ls | where modified > 3
ls | where modified > "a year"
ls | where modified > "year"
ls | where modified > 
date
help date
date now
date humanize
date
clear
date now 
ls
ls | filter
filter
ls | sort
ls | sort-by modified
ls
cd .config/
ls
ls | sort
ls | sort -r
ls | sort-by type
ls | where type == "symlink"
z yolk
ls
clear
ls
starship
starship preset
starship preset "pure-config"
starship preset pure-config
starship preset pure-preset
z .confi
starship preset pure-preset | save starship.toml
starship preset pure-preset | save starship.toml -f
ls
starship preset pure-preset | save -f ~/.config/starship.toml
cd .config/
ls
rg start
fd star
fd starship
ls
starship preset pure-prese | save -f ~/.config/starship.toml
starship preset tokyo-night | save -f ~/.config/starship.toml
ls
clear
ls
clear
ls
starship preset pure-preset | save -f ~/.config/starship.toml
clear
ls
cd .config
cd fish
ls
cd ..
rm -r fish
clear
ls
sortman
sortman --help
help sortman
tldr sortman
ls | sort-by type
ls --help
help ls
ls -D
ls
ls --help
ls -d
cd carapace/
ls
yazi
z media
ls
z nu
yolk edit shell-nu
yolk edit nu
z eggs
ls
cd ..
bat yolk.rhai 
yolk edit shell_nu
config nu
clear
z niri
helix config.kdl 
clear
ls
z top
clear
ls
cd .config
ls
paru
z yolk
ls
yolk sync
cd .config/fish
ls
z share
ls
cd fish/
ls
cd ..
yolk sync
z .config/
ls
mv topgrade.toml yolk/eggs/apps/
yolk sync
yazi
mv git/ yolk/eggs/apps/
yazi
dust BraveSoftware/
clear
yolk sync
clear
yazi
yolk git
yolk git add .
git commit -m "Update"
yolk git commit -m "Update"
yolk git push
clear
z yolk
cd fish
cd eggs/shell_fish/
ls
clear
ave
yolk git add .
yolk git commit -m "Update"
yolk git push
yolk git status
yolk git add .
yolk git commit -m "Update"
yolk git push
clear
ls
clear
yolk git status
helix fish_history 
ls
yolk git add .
git commit -m "Update"
yolk git commit -m "Update"
yolk git push
yolk git status
yolk git add . ; yolk git commit -m "Update" ; yolk git push
helix fish_history 
git log
yolk git log
git diff main 5ee4bdcd5cfcea10bab81fb75115d75bdc6bf38d
yolk git log
l
ls
mv .yolk_git/ .git
git status
clear
git lo
git log
git diff main 5ee4bdcd5cfcea10bab81fb75115d75bdc6bf38d
git log
git diff main 5ee4bdcd5cfcea10bab81fb75115d75bdc6bf38d
git log
git diff main 0aeaeff1187ac5d43ac2d5db171a8bb904a59376
git diff main 5ee4bdcd5cfcea10bab81fb75115d75bdc6bf38d
clear
ls
git lo
git log
git commit --amend --all
git push
git log
git diff main origin/main 
git log
clear
ls
yazi
z yolk
yolk safeguard
ls
ls -a
clear
ls -a
helix yolk.rhai 
clear
paru -Ss gimp
paru -S gimp
clear
btop
cd Público
ls
ps
ps | sort-by mem -r | $"PID: ($in.pid.0) | MEM: ($in.mem.0)"
ps | sort-by mem -r | $"PID: ($in.name.0) | MEM: ($in.mem.0)"
ps | sort-by mem -r | where name == "ignis" | $"PID: ($in.name.0) | MEM: ($in.mem.0)"
ps | sort-by mem -r | where name == "ignis" | $"NAME: ($in.name.0) | MEM: ($in.mem.0)"
ps | where name == "ignis" | $"NAME: ($in.name.0) | MEM: ($in.mem.0)"
btop
clear
fastfetch 
echo $env.EDITOR
btop
ls
paru -Sy nushell
clear
ls
clear
ls
clear
cargo-bloat
config nu
ls
cargo clippy
ls
ls -a
cargo-miri 
cargo 
cargo-bloat 
clear
help export-env
help load-env
{XDG_CACHE_HOME: ""} | load-env
$env.XDG_CACHE_HOME
{XDG_CACHE_HOME: "XD"} | load-env
$env.XDG_CACHE_HOME
export-env
help export-env
help load-env
echo $env.XDG_CONFIG_HOME
ls
echo $env.XDG_CONFIG_HOME
echo $env.CARGO_HOME
echo $env.UV_CACHE_DIR
config env
clear
ls
yazi
clear
ls
clear
yazi
clear
http get https://api.dictionaryapi.dev/api/v2/entries/en
http get https://api.dictionaryapi.dev/api/v2/entries/en/hello
let word = "xd" | http get $"https://api.dictionaryapi.dev/api/v2/entries/en/($word)"
const word = "xd" | http get $"https://api.dictionaryapi.dev/api/v2/entries/en/($word)"
let word = "hola" | http get $"https://api.dictionaryapi.dev/api/v2/entries/en/($word)"
help generate
let word = "hola" |<\n>http get $"https://api.dictionaryapi.dev/api/v2/entries/en/($word)"
let word = "hola"<\n>| http get $"https://api.dictionaryapi.dev/api/v2/entries/en/($word)"
lsafas
let word = "hellp"<\n>| http get $"https://api.dictionaryapi.dev/api/v2/entries/en/($word)"
let word = "hello"<\n>| http get $"https://api.dictionaryapi.dev/api/v2/entries/en/($word)"
$env.word = "hello"<\n>| http get $"https://api.dictionaryapi.dev/api/v2/entries/en/($env.word)"
http get
help http get
help download
help --find download
url
$env.word = "hello"<\n>| http get https://api.dictionaryapi.dev/api/v2/entries/en | url join $env.word
url build-query
url build-query --help
url build-query -h
url
url join -h
url
url split-query -h
url
url parse -h
url
$env.word = "hello"<\n>| http get https://api.dictionaryapi.dev/api/v2/entries/en | path join $env.word
rename
help rename
let word = "hello"<\n>| http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)
let word = "hello"<\n>| http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $in.word)
let word = "hello" | $in.word
let word = "hello" | echo $in.word
let word = "hello"
let word = "hello"; http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $in.word)
let word = "hello"; http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)
let word = "hello";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)
clear
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| explore
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| get meaning<\n>| explore
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| get meaning<\n>| explores
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| get meanings<\n>| explore
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| get meanings
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| get meanings<\n>| explore
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| get meanings<\n>| first | <\n>| explore
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| get meanings<\n>| first
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| get meanings | first | get definiton
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| get meanings | first | get definition
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| get meanings | first | get definitions
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| get meanings | first
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| get meanings
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| get meanings | first | get definitions
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| get meanings
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| get meanings | each { $in | get definitions }
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| get meanings | each { $in | get definitions }<\n>| table
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| get meanings | each { $in | get definitions }<\n>| table -e
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| get meanings | each { $in | get definitions }
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| get meanings | each { $in | get definitions }<\n>| $in.xd
filter
help filter
help --find find
du
help du
du .cache
du .confi
du .config
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| get meanings | each { $in | get definitions }<\n>| $in.definition
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| get meanings | each { $in | get definitions }
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| get meanings | each { $in | get definitions | get definition }
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| get meanings | each { $in.definitions }
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| $in.meanings | each { $in.definitions }
help get
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| $in.meanings | each { $in.definitions }<\n>| explore
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| $in.meanings | each { $in.definitions }<\n>| compact | explore
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| $in.meanings | each { $in.definitions }<\n>| compact
compact
compact --help
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| $in.meanings | each { $in.definitions }<\n>| compact --empty
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| $in.meanings | each { $in.definitions }<\n>| compact
type
describe
describe -h
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| $in.meanings | each { $in.definitions }<\n>| describe
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| $in.meanings | each { $in.definitions }<\n>| explore
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| $in.meanings | each { $in.definitions }<\n>| flatten |explore
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| $in.meanings | each { $in.definitions }<\n>| flatten | flatten | explore
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| $in.meanings | each { $in.definitions }<\n>| flatten | flatten<\n>| explore
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| $in.meanings | each { $in.definitions }<\n>| flatten | flatten
flatten -h
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| $in.meanings | each { $in.definitions }<\n>| flatten -a
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| $in.meanings | each { $in.definitions }<\n>| flatten
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| $in.meanings | each { $in.definitions }<\n>| flatten | flatten
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| $in.meanings | each { $in.definitions }<\n>| flatten
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| $in.meanings | each { $in.definitions }<\n>| flatten definition
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| $in.meanings | each { $in.definitions }<\n>| flatten definition --all
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| $in.meanings | each { $in.definitions }<\n>| flatten | flatten
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| $in.meanings | each { $in.definitions }<\n>| flatten | flatten | explore
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| $in.meanings | each { $in.definitions }<\n>| flatten | flatten | select definition
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| $in.meanings | each { $in.definitions }<\n>| flatten | flatten | select definition example
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| $in.meanings | each { $in.definitions }<\n>| flatten | flatten<\n>| select definition<\n>| explore
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| $in.meanings | each { $in.definitions }<\n>| flatten | flatten<\n>| explore
help select
help reject
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| $in.meanings | each { $in.definitions }<\n>| select definition
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| $in.meanings | each { $in.definitions }<\n>| flatten | flatten
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| $in.meanings | each { $in.definitions }<\n>| select definition
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| $in.meanings | each { $in.definitions }<\n>| flatten | flatten
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| $in.meanings | each { $in.definitions }<\n>| flatten | flatten | select definition example
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| $in.meanings | each { $in.definitions }<\n>| flatten | flatten | select definition
btop
ps | where name == "ignis" | $"NAME: ($in.name.0) | MEM: ($in.mem.0)"
help first
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| $in.meanings | each { $in.definitions }<\n>| flatten | flatten | select definition | first 5
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| $in.meanings | each { $in.definitions }<\n>| explore
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| $in.meanings.0 | each { $in.definitions }<\n>| explore
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| $in.meanings.0 | each { $in.definitions.0 }<\n>| explore
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| $in.meanings.0.definitions.0
let word = "cat";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| $in.meanings.0.definitions.0 | select definition
let word = "dog";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| $in.meanings.0.definitions.0 | select definition
let word = "dog";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| $in.meanings.0.definitions.0 | select definition<\n>| grid
let word = "dog";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/es/' + $word)<\n>| $in.meanings.0.definitions.0 | select definition<\n>| grid
let word = "perro";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/es/' + $word)<\n>| $in.meanings.0.definitions.0 | select definition<\n>| grid
let word = "dog";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word)<\n>| $in.meanings.0.definitions.0 | select definition
http -h
help -f
help -f network
sys net
sys
sys temp
sys
sys host
sys mem
let word = "dog";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word | str replace ' ' '%20')<\n>| $in.meanings.0.definitions.0 | select definition
let word = "dog mascot";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word | str replace ' ' '%20')<\n>| $in.meanings.0.definitions.0 | select definition
let word = "person";<\n>http get ('https://api.dictionaryapi.dev/api/v2/entries/en/' + $word | str replace ' ' '%20')<\n>| $in.meanings.0.definitions.0 | select definition
clea
celar
clear
ls
clear
ls
cd .config/
ls
clear
ls
fd
clear
ls
find
help find
ls | find top
ls | find fish
ls | find xd
help find
help find | bat -p
help find | less
help find | man
help find | explore
help find | bat 
more
help find | bat -p
help find | more
explore -h
cd .config
ls | find top
help find | more
man more
less
help find | explore --peek
help find | explore
paru -Syu
topgrade --yes --cleanup
z nu
ls
helix env.nu 
z ignis
ls
ls | grid
paru -Ss inter
paru -Ss inter font
paru -S inter-font
ps | where name == "ignis" | $"NAME: ($in.name.0) | MEM: ($in.mem.0)"
kill ignis
kill
kill --help
pkill
kill
help -f close
ps
ps | where name == "ignis"
ps | where name == "ignis" | kill $in.pid
ps | where name == "ignis"
ps | where name == "ignis" | $in
ps | where name == "ignis" | $in.pid
ps | where name == "ignis" | $in.pid.0
ps | where name == "ignis" | get $in.pid
ps | where name == "ignis" | $in.pid.0
ps | where name == "ignis" | $in.pid.0 | kill
ps | where name == "ignis" | kill $in.pid.0
ps | find name | kill $in.pid.0
ps | find niri | kill $in.pid.0
ps | find niri
ps | find niri --help
ps | where name == "ignis" | get pid.0 | kill
kill (ps | where name == "ignis" | get pid.0)
z ignis
s
ls
ignis init &
nu --version
job
start ignis
start
start --help
z ignis
helix styles/theme.scss 
yaiz
z ignis
matugen --help
matugen --help | lines
help lines
matugen --help | get 8
matugen --help | select 8
matugen --help
matugen --help | get 8
matugen --help | lines
matugen --help | lines | get 8
matugen --help | lines | get 8 | str
matugen --help | lines | get 8 | find possible-values
matugen --help | lines | get 8 | find pos
matugen --help | lines | get 8 | find possible
matugen --help | lines | get 8 | find possible values
matugen --help | lines | get 8 | find possible
help find
matugen --help | lines | get 8
matugen --help | lines | find scheme
matugen --help | lines
matugen --help | lines | get 8 | find scheme
matugen --help | lines | get 8 | find scheme-
matugen --help | lines | get 8 | find scheme- | each { $in | str }
matugen --help | lines | get 8 | find scheme- | each { $in | str trim "scheme-" }
matugen --help | lines | get 8 | find scheme- | each { $in }
help filte
help filter
matugen --help | lines | get 8 | find scheme- | each { $in | str list "scheme-" }
matugen --help | lines | get 8 | split
matugen --help | lines | get 8 | split list scheme-
matugen --help | lines | get 8
paru -Ss lapce
paru -S lapce
z media
lapce .
cler
clear
z media
lapce --help
cd ..
lapce media-dl/
z media
ls
clear
ls
clear
l
s
pgrep
pgrep lapce
clear
ls
lapce .
z web
ls
cd zoom-web/
ls
clear
lapce .
svelteserver 
svelteserver  --help
paru -Ss svelte
ps | where name == "lapce"
paru -Ss vscode-lang
ps | where name == "lapce"
z zoom
lapce .
ps | where name == "lapce"
z niri
ls
kill (ps | where name == "lapce" | get pid.0)
clear
z media
z 
z
z zoo
clear
lapce .
ps | where name == "lapce"
ps
ps -h
ps -h | bat -p
help -f tasks
help -f ops
help -f operations
help -f procedures
ps -h | bat -p
ps | where name == "lapce"
paru -Rns lapce
ls
config nu
config env
ls
$nu.user-autoload-dirs
$nu.user-autoload-dirs.0
$nu.user-autoload-dirs.0 | ls
ls -h
ls $nu.user-autoload-dirs.0
ls $nu.user-autoload-dirs.0 
cd -h
cd ~
z media
cd ...
cd ..
cd ....
z media
cd ....
cd .
cd ..
clear
ls
ps
ps | bat -p
ps | where name == "electron"
killall  -
killall  -h
clear
ps | where name == "electron" | each {<\n>kill $in.pid<\n>}
ps
ps | where name == "electron" | each {<\n>kill $in.pid<\n>}ç
ps | where name == "electron" | each {<\n>kill $in.pid<\n>}
clear
ls
clear
matugen --help | split words
split
matugen --help | lines | get 8 | split words
split
help split cell-path
split
matugen --help | lines | get 8 | split words
matugen --help | lines | get 8 | split words | each {<\n>str starts-with "scheme-"<\n>}
matugen --help | lines | get 8 | split words | where {<\n>str starts-with "scheme-"<\n>}
matugen --help | lines | get 8 | split words | where { str starts-with "scheme-" }
matugen --help | lines | get 8 | split words | where { $in | str starts-with "scheme-" }
matugen --help | lines | get 8 | split words | where { $in }
"scheme-"
"scheme-tonal-spot" | str starts-with "scheme-"
matugen --help | lines | get 8 | split words | where { $in | str starts-with "scheme-" }
help where
matugen --help | lines | get 8 | split words | where { $it | str starts-with "scheme-" }
matugen --help | lines | get 8 | split words | where { $in | str starts-with "scheme-" }
matugen --help | lines | get 8 | split words | where {|$e| $e | str starts-with "scheme-" }
matugen --help | lines | get 8 | split words | where {<\n>|$e| $e | str starts-with "scheme-" <\n>}
matugen --help | lines | get 8 | split words | where {|$e| $e}
matugen --help | lines | get 8 | split words | each {|$e| $e}
matugen --help | lines | get 8 | split words | where {|$e| $e}
matugen --help | lines | get 8 | split words | where {|$e| true}
matugen --help | lines | get 8 | split words | where {|$e| $e}
matugen --help | lines | get 8 | split words | where {|$e| $e == "scheme"}
matugen --help | lines | get 8 | split words | where {|$e| $e}
matugen --help | lines | get 8 | split words | where {|$e| true}
matugen --help | get 8 | split words | where {|$e| true}
matugen --help | lines | get 8 | split words | where {|$e| true}
matugen --help | lines | get 8 | split words
matugen --help | lines | get 8
matugen --help | lines | get 8 | split words
matugen --help | lines | get 8 | split 
matugen --help | lines | get 8 | split chars
matugen --help | lines | get 8 | split
matugen --help | lines | get 8 | split words -h
matugen --help | lines | get 8 | split 
matugen --help | lines | get 8 | split words
matugen --help | lines | get 8 | split words -h
matugen --help | lines | get 8 | split 
matugen --help | lines | get 8 | split list
matugen --help | lines | get 8 | split chars -h
matugen --help | lines | get 8 | split 
matugen --help | lines | get 8 | split column
matugen --help | lines | get 8 | split row
matugen --help | lines | get 8 | split 
matugen --help | lines | get 8 | split cell-path
matugen --help | lines | get 8 | str
matugen --help | lines | get 8 | split
matugen --help | lines | get 8 | split row
matugen --help | lines | get 8 | split column
matugen --help | lines | get 8 | split column ""
matugen --help | lines | get 8 | split column " "
matugen --help | lines | get 8 | split column ","
matugen --help | lines | get 8
matugen --help | lines | get 8 | split column ", "
matugen --help | lines | get 8
matugen --help | lines | get 8 | split column ", "
matugen --help | lines | get 8 | split 
matugen --help | lines | get 8 | split row ", "
matugen --help | lines | get 8 | split row "scheme-"
matugen --help | lines | get 8 | split row ", "
matugen --help | lines | get 8 | split row ", " | skip 0 1
matugen --help | lines | get 8 | split row ", " | skip 0
matugen --help | lines | get 8 | split row ", " | skip 
matugen --help | lines | get 8 | split row ", " | skip -h
matugen --help | lines | get 8 | split row ", " | skip 1 | skip 2
help -f ignore
help -f slice
help drop
help -f slice
help take
matugen --help | lines | get 8 | split row ", " | skip 1 | skip 2
matugen --help | lines | get 8 | split row ", " | skip 1 | skip 2 | each {|$i| $i | str trim}
matugen --help | lines | get 8 | split row ", " | skip 1 | skip 2 | each {|$i| $i | str trim "scheme-"}
str trim
str trim -h
matugen --help | lines | get 8 | split row ", " | skip 1 | skip 2 | each {|$i| $i | str trim --char "scheme-"}
help str
str replace -h
matugen --help | lines | get 8 | split row ", " | skip 1 | skip 2 | each {|$i| $i | str replace "scheme-" ""}
matugen --help | lines | get 8 | split row ", " | skip 1 | skip 2}
matugen --help | lines | get 8 | split row ", " | skip 1 | skip 2
matugen --help | lines | get 8 | split row ", " | skip 1 | skip 2 | each {|$i| $i | str replace "scheme-" ""}
matugen --help | lines | get 8 | split row ", " | skip 1 | skip 2 | each {|$i| $i | str replace "scheme-" "" | str trim --char "]"}
str trim
str trim -h
matugen --help | lines | get 8 | split row ", " | skip 1 | skip 2 | each {|$i| $i | str replace "scheme-" "" | str trim -c "]"}
matugen --help | lines | get 8 | split row ", " | skip 1 | skip 2 | each {|$i| $i | str replace "scheme-" "" | str trim -c "[]"}
matugen --help | lines | get 8 | split row ", " | skip 1 | skip 2 | each {|$i| $i | str replace "scheme-" "" | str trim -c "]"}
matugen --help | lines | get 8 | split row ", " | skip 1 | skip 2 | each {|$i| $i | str replace "scheme-" "" | str trim -c "]"} | to json
matugen --help | lines | get 8 | split row ", " | skip 1 | skip 2 | each {|$i| $i | str replace "scheme-" "" | str trim -c "]"} | to csv
matugen --help | lines | get 8 | split row ", " | skip 1 | skip 2 | each {|$i| $i | str replace "scheme-" "" | str trim -c "]"} | to yml
matugen --help | lines | get 8 | split row ", " | skip 1 | skip 2 | each {|$i| $i | str replace "scheme-" "" | str trim -c "]"} | to yaml
matugen --help | lines | get 8 | split row ", " | skip 1 | skip 2 | each {|$i| $i | str replace "scheme-" "" | str trim -c "]"} | to md 
matugen --help | lines | get 8 | split row ", " | skip 1 | skip 2 | each {|$i| $i | str replace "scheme-" "" | str trim -c "]"} | to json 
matugen --help | lines | get 8 | split row ", " | skip 1 | skip 2 | each {|$i| $i | str replace "scheme-" "" | str trim -c "]"} | to ç
matugen --help | lines | get 8 | split row ", " | skip 1 | skip 2 | each {|$i| $i | str replace "scheme-" "" | str trim -c "]"} | to html
matugen --help | lines | get 8 | split row ", " | skip 1 | skip 2 | each {|$i| $i | str replace "scheme-" "" | str trim -c "]"} | to nuon 
matugen --help | lines | get 8 | split row ", " | skip 1 | skip 2 | each {|$i| $i | str replace "scheme-" "" | str trim -c "]"} | to text 
matugen --help | lines | get 8 | split row ", " | skip 1 | skip 2 | each {|$i| $i | str replace "scheme-" "" | str trim -c "]"} | to yaml 
matugen --help | lines | get 8 | split row ", " | skip 1 | skip 2 | each {|$i| $i | str replace "scheme-" "" | str trim -c "]"} | to yaml | save xd.md
bat xd.md 
rm xd.md
paru -Ss nu
paru -Sy nushell
job
clear
job
kill ignis
killall ignis
job spawn ignis
job spawn {ignis}
job list
job spawn {ignis init}
job list
htop
btop
job
ps | where name =~ "ignis"
ps | where name =~ "ignis" | first | kill
ps | where name =~ "ignis" | first | kill $in.pid
ls
job spawn {ignis init}
job list
btop
ps | where name =~ "ignis" | first | kill $in.pid
config nu
paru -Sy ignis-git
config env
$current
job spawn {ignis init}
ls
clear
ls
clear
paru
shadow
paru -S fastfetch wget uv swaylock ruff
fastfetch 
clear
fastfetch 
killall
killall -h
pkill -
pkill -h
pgrep -h
man pkil
man pkill
pkill
pkill -h
pkill
pkill ignis
^pkill
clear
job spawn {ignis init}
job list
cd Documentos
cd ..
topgrade --yes --cleanup
lesfun
z zoom
code .
clear
wlsunset
clear
wlsunset
deno run dev
clear
deno run dev
ps
let count = 0;<\n>ps | each {|$i|<\n>$count = count + $i<\n>}
let count = 0;<\n>ps | each {|$i|<\n>let $count = count + $i<\n>}
let count = 0;<\n>ps | each {|$i|<\n>let $count = $count + $i<\n>}
let count = 0;<\n>ps | each {|$i|<\n>let $count = $count + $i.mem<\n>}
let count = 0mb;<\n>ps | each {|$i|<\n>let $count = $count + $i.mem<\n>}
let count = 0mb;<\n>ps | each {|$i|<\n>let $count = $count + $i.mem<\n>}<\n>echo count
let count = 0mb;<\n>ps | each {|$i|<\n>let $count = $count + $i.mem<\n>}<\n>echo $count
mut let count = 0mb;<\n>ps | each {|$i|<\n>$count = $count + $i.mem<\n>}<\n>echo $count
mut count = 0mb;<\n>ps | each {|$i|<\n>$count = $count + $i.mem<\n>}<\n>echo $count
mut count = 0mb;<\n>ps | each {|$i|<\n>$count + $i.mem<\n>}<\n>echo $count
let count = 0mb;<\n>ps | each {|$i|<\n>let $count = $count + $i.mem<\n>}<\n>echo $count
for $it in ps {<\n>}
for $it in ps {<\n>echo $it.mem<\n>}
for $it in ps {<\n>echo $it<\n>}
ps
for $it in ps {<\n>echo $it<\n>}
for $it in ps {<\n>echo ($it | describe)<\n>}
each -h
help each
ps | each {|e| $e }
ps | each {|e| $e.pid }
ps | each {|e| $e.ma,e }
ps | each {|e| $e.name }
ps | select name
ps | each {|e| $e.mem }
let count = 0mb;<\n>ps | each {|e| let count = $count + $e }
let count = 0mb;<\n>ps | each {|e| let count = $count + $e.mem }
mut count = 0mb;<\n>ps | each {|e| $count + $e.mem }
let count = 0mb;<\n>ps | each {|e| $count + $e.mem }
let count = 0mb;<\n>ps | each {|e| $count + $e.mem };<\n>$count
mut count = 0mb;<\n>ps | for $it in ps {$count + $it.mem };<\n>$count
help fo
help for
mut count = 0mb;<\n>for $it in ps {$count + $it.mem };<\n>$count
mut count = 0mb;<\n>for it in ps {$count + $it.mem };<\n>$count
mut count = 0mb;<\n>for $it in ps {$count + $it.mem };<\n>$count
mut count = 0mb;<\n>for $it in ps {$count + $it };<\n>$count
mut count = 0mb;<\n>for $it in ps {echo $it };<\n>$count
let count = 0mb;<\n>ps | each {|e| $count + $e.mem };<\n>$count
ps
help reduce
ps | reduce {|a, b| a + b}
ps | reduce {|a, b| $a + $b}
ps | $in.mem | reduce {|a, b| $a + $b}
clear
ps | $in.mem | reduce {|a, b| $a + $b}
ps | $in.mem
ps | $in.mem | reduce {|a, b| $a + $b}
ps | $in.mem | reduce {|a b| $a + $b}
ps | $in.mem | reduce {|a, b| $a + $b}
ps | $in.mem | reduce {|a b| $a + $b}
help reduce
ps | $in.mem | reduce {|a c| $a + $c}
ps | $in.mem | reduce {|a b| $a + $b}
clear
ps | $in.mem | reduce {|a b| $a + $b}
clear
ps | $in.mem | reduce {|a b| $a + $b}
ps | $in.mem | reduce {|$a $b| $a + $b}
clear
ps | $in.mem | reduce {|$a $b| $a + $b}
ps | get mem | reduce {|$a $b| $a + $b}
clear
fastfetch 
clear
fastfetch 
clear
ps | get mem | reduce {|$a $b| $a + $b}
ps | get mem | reduce {|$a b| $a + $b}
ps | get mem | reduce {|$a $b| $a + $b}
collect 
collect  -h
fastfetch 
ps | get mem | reduce {|$a $b| $a + $b}
btop
clear
fastfetch 
ps | get mem | reduce {|$a $b| $a + $b}
ps
ps | get mem | reduce {|$a $b| $a + $b}
ps | get mem
clear
ps | get mem | reduce {|$a $b| $a + $b}
clear
ps | get mem | reduce {|$a $b| $a + $b}
clear
ps | get mem | reduce {|$a $b| $a + $b}
ps | get mem | reduce {|a b| $a + $b}
matugen --help | lines | get 8 | split row ", " | skip 1 | skip 2 | each {|$i| $i | str replace "scheme-" "" | str trim -c "]"} | to yaml | save xd.md
ls
rm xd.md
matugen --help | lines | get 8 | split row ", " | skip 1 | skip 2 | each {|$i| $i | str replace "scheme-" "" | str trim -c "]"}
clear
matugen --help | lines | get 8 | split row ", " | skip 1 | skip 2 | each {|$i| $i | str replace "scheme-" "" | str trim -c "]"}
matugen --help
skip
help skip
ignore
help ignore
silent
remove
help reduce
help fold
help map
map
fold
help fold
fold -h
tail
slice
slice -h
matugen --help | lines | get 8 | split row ", " | skip 1 | skip 2 | each {|$i| $i | str replace "scheme-" "" | str trim -c "]"}
matugen --help | lines | get 8 | split row ", " |<\n>skip 1 | skip 2<\n>| each {|$i| $i | str replace "scheme-" "" | str trim -c "]"}
matugen --help | lines | get 8 | split row ", "
help -f range
help -f tail
help drop
matugen --help | lines | get 8 | split row ", " |<\n>slice 2..-2<\n>| each {|$i| $i | str replace "scheme-" "" | str trim -c "]"}
matugen --help | lines | get 8 | split row ", " |<\n>slice 2..-1<\n>| each {|$i| $i | str replace "scheme-" "" | str trim -c "]"}
matugen --help | lines | get 8 | split row ", " |<\n>slice 2..-1
matugen --help | lines | get 8
matugen --help | lines | get 8 | split row ", " |<\n>slice 2..-1
matugen --help | lines | get 8 | split row ", " |<\n>slice 2..-2<\n>| each {|$i| $i | str replace "scheme-" "" | str trim -c "]"}
matugen --help | lines | get 8 | split row ", " | slice 2..-1<\n>| each {|$i| str replace "scheme-" "" | str trim -c "]"}
matugen --help | lines | get 8 | split row ", " | slice 2..-1<\n>| each {|| str replace "scheme-" "" | str trim -c "]"}
help trim
str
str substring
str substring -h
str contains
str contains -h
str replace -h
matugen --help | lines | get 8 | split row ", " | slice 2..-1<\n>| each {|| str replace "scheme-" "" | str replace -a "[" "]"}
str replace find
str replace find -h
str find
str replace
str replace -h
help str trim
matugen --help | lines | get 8 | split row ", " | slice 2..-1<\n>| each {|| str replace "scheme-" "" | str trim -c "]"}
matugen --help | lines | get 8 | split row ", " | slice 2..-1<\n>| each {|| str replace "scheme-" "" | str trim -c "[" | str trim -c "]"}
clear
matugen --help | lines | get 8 | split row ", " | slice 2..-1<\n>| each {|| str replace "scheme-" "" | str trim -c "[" | str trim -c "]"}
lutgen palette names | find catppuccin
lutgen palette names
lutgen palette names | find catppuccin
find -h
search
help -f search
lutgen palette names | find -n catppuccin
clear
lutgen palette names | find -n catppuccin
lutgen palette names | find -n catppuccin | grid
lutgen palette names | find -n catppuccin
matugen --help | lines | get 8
matugen --help | lines | get 8 | find -n scheme-
lutgen palette names
matugen --help | lines | get 8 | find -n scheme-
matugen --help | find -n scheme-
matugen --help | lines | find -n scheme-
matugen --help | lines
matugen --help | lines | find -n scheme-
matugen --help | lines | find scheme-
help find
matugen --help | lines | find sets
matugen --help | lines | find Sets
matugen --help | lines
matugen --help | find -n scheme-
matugen --help 
matugen --help | find -n scheme-
lutgen palette names | find -n catppuccin
lutgen palette names
matugen --help | lines | get 8 | split row ", " | slice 2..-1<\n>| each {|| str replace "scheme-" "" | str trim -c "[" | str trim -c "]"}
matugen --help | lines | get 8 | split row ", " | slice 2..-1
matugen --help | lines | get 8 | split row ", "
matugen --help | lines | get 8 | find scheme-
matugen --help | lines | get 8 | find -n scheme-
matugen --help | lines | get 8 | find scheme-
matugen --help | lines | get 8 | find scheme-*
help find
regex
matugen --help | lines | get 8 | find -r scheme-*
matugen --help | lines | get 8 | find -r scheme-
matugen --help | lines | get 8 | find --regex scheme-
matugen --help | lines | get 8 | find --regex "scheme-"
matugen --help | lines | get 8 | find --regex "scheme"
matugen --help | lines | get 8 | find --regex "scheme-"
matugen --help | lines | get 8 | find --regex "scheme-+"
matugen --help | lines | get 8 | find --regex "scheme-"
matugen --help | lines | get 8 | split row ", "
matugen --help | lines | get 8 | split row ", " | slice 2..-1
clear
matugen --help | lines | get 8 | split row ", " | slice 2..-1
clear
matugen --help | lines | get 8 | split row ", " | slice 2..-1
matugen --help | lines | get 8 | split row ", " | slice 2..-1 | each {|| str trim -c ]}
clear
matugen --help | lines | get 8 | split row ", " | slice 2..-1 | each {|| str trim -c ]}
matugen --help | lines | get 8 | split row ", " | slice 2..-1 | each {|| str trim -c "]"}
lutgen palette names
lutgen palette names | find -n catppuccin
lutgen palette names | find -n zen
lutgen palette names | find -n 
lutgen palette names | find -n xd
lutgen palette names | find -n git
lutgen palette names | find -n rose
lutgen palette names | find -n yaru
lutgen palette names | find -n yar
lutgen palette names | find -n ya
lutgen palette names | find -n primar
lutgen palette names | find -n primary
clear
git
man git
man swaylock
man swaylock | bat
man swaylock | bat -p
man swaylock | bat -P
clear
z fish
ls
cd .
cd ..
rm -r fish/
z egg
ls
cd shell_fish/
ls
cd config/
ls
yazi
z nu
ls
echo $env.PATH
$env.PATH
echo $env.PATH
echo $env.PATHc
echo $env.PATH
config env
config
config use-colors 
config flatten
config nu 
clear
topgrade --yes --cleanup
fastfetch 
clear
fastfetch 
btop
kill ignis
clear
ps | where name =~ "ignis" | first | kill $in.pid
fastfetch 
btop
job spawn {ignis init}
fastfetch 
btop
fastfetch 
ps | where name =~ "ignis" | first | kill $in.pid
job spawn {ignis init}
fastfetch 
btop
ls
clear
paru -Sy ig
matugen --help | lines | get 8 | split row ", " | slice 2..-1 | each {|| str trim -c "]"}
paru -Sy ignis-git
ps | where name =~ "ignis" | first | kill $in.pid
job spawn {ignis init}
paru -Sy wlsunset
pgrep wlsunset
wlsunset
wlsunset -h
wlsunset -T
wlsunset -T 9000
wlsunset -T 1000
wlsunset -T 6000
wlsunset -T 9000
wlsunset 
killall wlsunset
wlsunset -h
wlsunset -t 3000
wlsunset -t 4000
wlsunset -t 5000
wlsunset -t 7000
wlsunset -t 6000
wlsunset -h
wlsunset -g 0.5
wlsunset -g 0.8
wlsunset -g 0.9
wlsunset -h
wlsunset -t 6000 -T 9000
wlsunset -t 6000 -T 2000
wlsunset -t 6000 -T 9000
wlsunset -t 6000 -T 4000
wlsunset -t 6000 -T 8000
wlsunset -h
gammastep
paru -S gammastep
gammastep
gammastep -h
gammastep -o 6000
gammastep -o 9000
gammastep -l
gammastep -l list
gammastep -l manual
gammastep -l manual -o 5000
gammastep -h
gammastep -m list
gammastep -O 5000
gammastep -O 7000
gammastep -O 2000
gammastep -O 3000
wlsunset 
wlsunset  -h
wlsunset  -T 3000
wlsunset  - 3000
wlsunset  -t 3000
systemctl status geoclue
systemctl restart geoclue
systemctl status geoclue
wlsunset
wlsunset -g
wlsunset -h
man gammastep
gammastep
z ignis
ls
paru -Rns wlsunset
helix options.json
git status
git diff
clear
ls
git add .
git commit -m ":lipstick: Styles Features"
git push
git pull
clear
ls
cd Descargas
ls
rm "* `🐐 Charlotte Rossberg.pdf`"
rm `🐐 Charlotte Rossberg.pdf`
ls
clear
ls
paru
z deno
clear
ls
z media
ls
z zoom
clear
pgrep code
z zoom
code .
z yournal
zi your
z a
cd ..
cd Documentos/Dev/+Lang/rust/yournal-rs/
ls
clear
yazi
ls
helix Cargo.toml 
cargo build --release
yazi
helix Cargo.toml 
yazi
cargo build --release
yazi
helix Cargo.toml 
yazi
clear
ls
clear
cd des
cd Descargas
ls
git clone https://github.com/linkfrg/ignis
ls
cd ignis
ls
clear
ls
ls | sort-by type
z nu
alias
ls
core-ls 
ls 
ls
_ls 
clear
_ls 
clear
ls
def
help def
ya
ya emit
ya emit -h
ya pack
ls
cd .config
ls
ls | find git
find gir
find git
help find
clear
find -h
ls | find git
ls
ls -
ls -h
cd .confi
cd .config
ls -a
ls | sort-by type
clear
ls | sort-by type
ls | sort-by type -h
help ls
ls -h
glbo
glob
glob -h
glob rust
glob *.conf
ls *.conf
ls
ls -
ls -h
ls -d
ls -d -t
clear
ls -d -t
clear
cd Descargas
ls
cd ignis
kill ignis
killall ignis
clear
ls
uv install -r requirements.txt
uv
clear
uv
uv -h
uv sync -h
uv
uv -h
uv export
ls
ls | sort-by type -h
ls | sort-by type
bat pyproject.toml 
uv sync
ls
ls | sort-by type
clear
ls | sort-by type
overlay use .venv/bin/activate.nu
clear
ls
z ignis
ignis init
gh repo pr
gh repo
gh
gh pr
gh pr checkout 181
gh auth login
clear
ls
job spawn {ignis init}
clear
z niri
helix config.kdl 
z yolk
ctpv
cp -h
paru -Ss basedpyright
paru -S basedpyright
clear
pyright
rm -r /var/cache/pacman/pkg/download-moY4Uf
sudo rm -r /var/cache/pacman/pkg/download-moY4Uf
arch-clean
S
arch-clean
paru -Ss python-mako
paru -Rns python-mako
arch-clean
paru -Rns adobe-source-code-pro-fonts
paru -Rns libngtcp2 python-iniconfig python-pluggy python-pytest simdjson tk
arch-clean
yazi
ls -du
ls -d
clear
